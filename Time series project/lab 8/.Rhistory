plot.ts(GARCHfit$fitted.values,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
fittedvalues=fitted(GARCHfit)
fittedvalues
View(fittedvalues)
fittedvalues['V1']
fittedvalues[,1]
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(fittedvalues[,1],lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
plot.ts(fittedvalues[,1],type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(fittedvalues[,1],lty=1,col="blue")
lines(c(1:1440),fittedvalues[,1],lty=1,col="blue")
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),fittedvalues[,1],lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
GARCHfit$residuals
GARCHfit@fit$fitted.values
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
GARCHfit=ugarchfit(data=logdiff1, spec=spec, solver='solnp')
plot.ts(logdiff1,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
GARCHfit@fit$fitted.values
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=logdiff1, spec=spec, solver='solnp')
plot.ts(logdiff1,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
length(GARCHfit@fit$fitted.values)
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=logdiff1, spec=spec, solver='solnp')
plot.ts(logdiff1,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=xt, spec=spec, solver='solnp')
plot.ts(xt,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
GARCHfit@fit$fitted.values
p = 144;
q = 144;  # orders of the GARCH model
PP = 0;
QQ = 0; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=xt, spec=spec, solver='solnp')
p = 6;
q = 6;  # orders of the GARCH model
PP = 0;
QQ = 0; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=xt, spec=spec, solver='solnp')
plot.ts(xt,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
p = 3*6;
q = 3*6;  # orders of the GARCH model
PP = 0;
QQ = 0; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=xt, spec=spec, solver='solnp')
plot.ts(xt,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
p = 2;
q = 2;  # orders of the GARCH model
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(2:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
p = 2;
q = 2;  # orders of the GARCH model
PP = 1;
QQ = 1; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$fitted.values,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$fitted.values, main='Quantile-Quantile plot - AR(1)',col='blue')
p = 1;
q = 1;  # orders of the GARCH model
PP = 1;
QQ = 1; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = FALSE))
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$fitted.values,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$fitted.values, main='Quantile-Quantile plot - AR(1)',col='blue')
p = 1;
q = 1;  # orders of the GARCH model
PP = 1;
QQ = 1; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$fitted.values,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$fitted.values, main='Quantile-Quantile plot - AR(1)',col='blue')
p = 1;
q = 1;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=sample, spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$fitted.values,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$fitted.values, main='Quantile-Quantile plot - AR(1)',col='blue')
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=ts(sample,frequency = 144), spec=spec, solver='solnp')
plot.ts(sample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$fitted.values,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - AR(1)',col='blue')
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=ts(logsample,frequency = 144), spec=spec, solver='solnp')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - AR(1)',col='blue')
autoplot(GARCHfit)
?ugarchfit
setwd('C:/Users/DELL/Google Drive/JVN couse materials/Projects/Practice projects/Time series project/lab 8')
oil_data <- read.csv("oil_price_data.csv")
oil_data$date <- strptime(oil_data$date,format="%d/%m/%Y")
oil_data$crude <- as.numeric(oil_data$crude)
oil_data$Brent <- as.numeric(oil_data$Brent)
n = length(oil_data$crude)
oil_data$logreturn_crude <- c(0,log(oil_data$crude[2:n])-log(oil_data$crude[1:(n-1)]))
par(mfrow=c(2,2))
plot(oil_data$date,oil_data$crude,type="l",xlab="Date",ylab="Price ($)",main="Crude Oil Price")
grid()
plot(oil_data$date,oil_data$logreturn_crude,type="l",xlab="Date",ylab="Log return",main="Log Return of Crude Oil Price")
grid()
acf(oil_data$logreturn_crude,main="ACF of log return")
grid()
acf(oil_data$logreturn_crude*oil_data$logreturn_crude,main="ACF of square of log return")
grid()
library(rugarch)
p = 1;
q = 1;  # orders of the GARCH model
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(0,0),include.mean=FALSE))
PP = 1;
QQ = 1; # orders of the ARMA model for the observed process.
spec2 = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),
mean.model=list(armaOrder=c(2,2),include.mean = TRUE))
spec_knownparams = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(2,1)),
mean.model = list(armaOrder=c(1,1),include.mean=TRUE),
fixed.pars=list(mu=0,ar1=0.28,ma1=-0.4,omega=0,alpha1=0.25,alpha2=0.2, beta1=0.35))
logreturn.forecast = ugarchforecast(fitORspec=spec_knownparams,
data=oil_data$logreturn_crude[1:5000],
n.ahead=100,n.roll=10,out.sample=10)
show(logreturn.forecast)
plot(logreturn.forecast)
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=ts(logsample,frequency = 144), spec=spec, solver='solnp')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
dev.off()
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - AR(1)',col='blue')
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=100)
plot(GARCHforecast)
?spec
?ugarchspec
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=ts(logsample,frequency = 144), spec=spec, solver='solnp')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - AR(1)',col='blue')
?urgarchforecast
?ugarchforecast
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=100)
View(rawdata)
View(rawdata)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12)
show(GARCHforecast)
View(GARCHforecast)
show(GARCHforecast)
plot(GARCHforecast)
GARCHfit=ugarchfit(data=logsample, spec=spec, solver='solnp')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12)
show(GARCHforecast)
plot(GARCHforecast)
?GARCHfit
?ugarchfit
?ugarchfit
plot(GARCHforecast)
1
plot(GARCHforecast)
logreturn.fit <- ugarchfit(spec=ugarchspec(variance.model = list(model="sGARCH",garchOrder=c(1,2)),
mean.model     = list(armaOrder=c(1,1),include.mean=TRUE)),
data=oil_data$logreturn_crude[1:5000])
show(logreturn.fit)
plot(logreturn.fit)
library('lubridate')
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=logsample, spec=spec, solver='solnp')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - AR(1)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - AR(1)',col='blue')
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12)
show(GARCHforecast)
plot(GARCHforecast)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=10)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=9)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=11)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=11)
show(GARCHforecast)
plot(GARCHforecast)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=11)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=20)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=10, out.sample=100)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=1, out.sample=5)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit, n.roll=1, out.sample=5)
?ugarchforecast
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=1, out.sample=20)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.head=12, n.roll=1, out.sample=100)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=100,n.roll=10,out.sample=10)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=12,n.roll=1,out.sample=10)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=12,n.roll=1,out.sample=20)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=1,n.roll=1,out.sample=20)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=1,n.roll=1,out.sample=20)
?arima
p = 6;
q = 6;  # orders of the GARCH model
PP = 6;
QQ = 6; # orders of the ARMA model for the observed process.
spec = ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(p,q)),
mean.model=list(armaOrder=c(PP,QQ),include.mean = TRUE))
GARCHfit=ugarchfit(data=logsample, spec=spec, solver='solnp')
acf(ar1_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot')
acf(ar1_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-AR1')
acf(ar6_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-AR6')
acf(arma66_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARMA66')
hist(arma66_model$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARMA(6,6)',col='blue')
qqnorm(arma66_model$residuals, main='Quantile-Quantile plot - ARMA(6,6)',col='blue')
acf(arma66_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARMA66')
acf(arma626_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARIMA626')
arima626_model=arima(x=logsample, order = c(6L, 2L, 6L))
arima626_model
fittedvalues=fitted(arima626_model)
mape(logsample,fittedvalues)
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="ARIMA(6,2,6) model",col='red')
lines(fittedvalues,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(arima626_model$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARIMA(6,2,6)',col='blue')
qqnorm(arima626_model$residuals, main='Quantile-Quantile plot - ARIMA(6,2,6)',col='blue')
acf(arma626_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARIMA626')
acf(arima626_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARIMA626')
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.ahead=12)
show(GARCHforecast)
plot(GARCHforecast)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.roll=10)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.roll=10, out.sample = 12)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.roll=10, out.sample = 1000)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.roll=0, out.sample = 1000)
show(GARCHforecast)
plot(GARCHforecast)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit,n.roll=1, out.sample = 1000)
GARCHforecast=ugarchforecast(fitORspec=GARCHfit, n.ahead=12)
show(GARCHforecast)
xt=logdiff1
xtsquared=xt**2
par(mfrow=c(1,2))
acf(xt, lag.max=288, type='correlation', plot=TRUE, main='xt ACF plot')
acf(xtsquared, lag.max=288, type='correlation', plot=TRUE, main='xt squared ACF plot')
dev.off()
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(1,1)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(6,6)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - GARCH',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - GARCH',col='blue')
hist(GARCHfit@fit$residuals,breaks=25, freq=FALSE, main='Residual Plot - GARCH-ARMA(6,6)',col='blue')
qqnorm(GARCHfit@fit$residuals, main='Quantile-Quantile plot - GARCH-ARMA(6,6)',col='blue')
acf(arima626_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-GARCH-ARMA(6,6)')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="GARCH-ARMA(6,6)",col='red')
lines(c(1:1440),GARCHfit@fit$fitted.values,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
mape(logsample,GARCHfit@fit$fitted.values)
AIC(GARCHfit)
plot(GARCHfit@fit$residuals, main='Residual Plot - GARCH-ARMA(6,6)',col='blue')
plot(GARCHfit@fit$residuals, main='Residual Plot - GARCH-ARMA(6,6)',col='blue',type='l')
AIC(GARCHfit@fit)
AIC(GARCHfit@fit$log.likelihoods)
m=4
AIC=-2*prod(GARCHfit@fit$log.likelihoods)+2*m
AIC
prod(GARCHfit@fit$log.likelihoods)
?auto.arima
opt.arimamodel=auto.arima(logsample)
opt.arimamodel
mape(logsample[3:1440],opt.arimamodel$fitted)
length(opt.arimamodel$fitted)
mape(logsample,opt.arimamodel$fitted)
acf(GARCHfit@fit$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-GARCH-ARMA(6,6)')
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="ARIMA(3,0,3) model",col='red')
lines(fittedvalues,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(opt.arimamodel$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARIMA(3,0,3)',col='blue')
qqnorm(opt.arimamodel$residuals, main='Quantile-Quantile plot - ARIMA(3,0,3)',col='blue')
acf(opt.arimamodel$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARIMA(3,0,3)')
opt.arimaforecast=forecast(opt.arimamodel,h=12)
autoplot(opt.arimaforecast, main='Forecast-log scale-ARIMA(3,0,3)', ylab='log energy', xlim=c(1400,1453))
plot(GARCHforecast)
plot(GARCHforecast)
plot(logsample, main = 'HW_ADDITIVE model', ylab='Log Energy', col='red')
lines(c(145:1440),HW_ADD_model$fitted[,1], col='blue')
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
mape(logsample[145:1440],HW_ADD_model$fitted[,1])
logtestsample=log10(testsample)
opt.arimaforecast=forecast(opt.arimamodel,h=12)
autoplot(opt.arimaforecast, main='Forecast-log scale-ARIMA(3,0,3)', ylab='log energy', xlim=c(1400,1453))
lines(logtestsample[1441:1452])
lines(c(1441:1452),logtestsample[1441:1452],col='red')
opt.arimaforecast=forecast(opt.arimamodel,h=12)
autoplot(opt.arimaforecast, main='Forecast-log scale-ARIMA(3,0,3)', ylab='log energy', xlim=c(1400,1453))
lines(c(1441:1452),logtestsample[1441:1452],col='red')
lines(c(1441:1452),logtestsample[1441:1452],col='red')
opt.arimaforecast=forecast(opt.arimamodel,h=12)
opt.arimaforecast=forecast(opt.arimamodel,h=12)
autoplot(opt.arimaforecast, main='Forecast-log scale-ARIMA(3,0,3)', ylab='log energy', xlim=c(1400,1453))
lines(c(1441:1452),logtestsample[1441:1452],col='red')
plot(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black')
lines(c(1441:1452),logtestsample[1441:1452],col='red')
lines(c(1441:1452),opt.arimaforecast$fitted,col='blue')
lines(c(1441:1452),opt.arimaforecast$lower[,1],col='red',lty=2)
lines(c(1441:1452),opt.arimaforecast$upper[,1],col='red',lty=2)
lines(c(1441:1452),opt.arimaforecast$lower[,2],col='green',lty=2)
lines(c(1441:1452),opt.arimaforecast$upper[,2],col='green',lty=2)
logtestsample[1441:1452]
logtestsample
logsample[1400:1440]
plot(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black')
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black')
plot(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black',type='l')
?plot
plot(y=logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black',type='l')
plot(x=c(1400:1453),y=logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black',type='l')
plot(x=c(1400:),y=logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black',type='l')
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),col='black',type='l')
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),ylim=c(-3,3),col='black',type='l')
logsample[1400:1440]
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),ylim=c(-3,3),type='l')
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),ylim=c(-3,3),type='l')
sample=ts(appliances_ts[43:1482])
logsample=log10(sample)
plot.ts(logsample[1400:1440],main='Forecast-log scale-ARIMA(3,0,3)',xlab='Time',ylab='log energy',xlim=c(1400,1453),ylim=c(-3,3),type='l')
View(rawdata)
View(rawdata)
hist(arma66_model$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARMA(6,6)',col='blue')
hist(arima626_model$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARIMA(6,2,6)',col='blue')
exp_forecast=forecast(exp_model, h=12)
autoplot(exp_forecast, main='Forecast-log scale-Exponential smoothing', ylab='log energy', xlim=c(1400,1453))
plot(c(0.1,0.2,0.3,0.4),MAPE, main='Gamma-alpha=0.6, beta=0.1', xlab='Gamma', ylab='MAPE', type='l')
MAPE=c(1:4)
for (i in 1:4){
HW_ADD_model = HoltWinters(ts(logsample,frequency=144),
alpha=0.2+i/10, beta=0.1, gamma=0.1,
l.start=logsample[1],
seasonal='additive')
MAPE[i]=mape(logsample[145:1440],HW_ADD_model$fitted[,1])
}
MAPE
HW_ADD_model
#alpha plot
plot(c(0.1,0.2,0.3,0.4),MAPE, main='Alpha-beta=0.1, gamma=0.1', xlab='Alpha', ylab='MAPE', type='l')
MAPE=c(1:4)
for (i in 1:4){
HW_ADD_model = HoltWinters(ts(logsample,frequency=144),
alpha=0.2+i/10, beta=0.1, gamma=0.1,
l.start=logsample[1],
seasonal='additive')
MAPE[i]=mape(logsample[145:1440],HW_ADD_model$fitted[,1])
}
MAPE
HW_ADD_model
#alpha plot
plot(c(0.3,0.4,0.5,0.6),MAPE, main='Alpha-beta=0.1, gamma=0.1', xlab='Alpha', ylab='MAPE', type='l')
MAPE=c(1:4)
for (i in 1:4){
HW_ADD_model = HoltWinters(ts(logsample,frequency=144),
alpha=0.6, beta=i/10, gamma=0.1,
l.start=logsample[1],
seasonal='additive')
MAPE[i]=mape(logsample[145:1440],HW_ADD_model$fitted[,1])
}
MAPE
HW_ADD_model
#alpha plot
plot(c(0.1,0.2,0.3,0.4),MAPE, main='Alpha-beta=0.1, gamma=0.1', xlab='Alpha', ylab='MAPE', type='l')
MAPE=c(1:4)
for (i in 1:4){
HW_ADD_model = HoltWinters(ts(logsample,frequency=144),
alpha=0.6, beta=i/10, gamma=0.1,
l.start=logsample[1],
seasonal='additive')
MAPE[i]=mape(logsample[145:1440],HW_ADD_model$fitted[,1])
}
MAPE
HW_ADD_model
#alpha plot
plot(c(0.1,0.2,0.3,0.4),MAPE, main='alpha=0.6-Beta-gamma=0.1', xlab='Beta', ylab='MAPE', type='l')
#Holt-Winter - Addictive
MAPE=c(1:4)
for (i in 1:4){
HW_ADD_model = HoltWinters(ts(logsample,frequency=144),
alpha=0.6, beta=0.1, gamma=i/10,
l.start=logsample[1],
seasonal='additive')
MAPE[i]=mape(logsample[145:1440],HW_ADD_model$fitted[,1])
}
MAPE
HW_ADD_model
#alpha plot
plot(c(0.1,0.2,0.3,0.4),MAPE, main='alpha=0.6-beta=0.1-Gamma', xlab='Gamma', ylab='MAPE', type='l')
arma66_model=arima(x=logsample, order = c(1L, 1L, 1L))
arma66_model
fittedvalues=fitted(arma66_model)
mape(logsample,fittedvalues)
plot.ts(logsample,type="l",xlab="Time point",ylab="Log energy(Wh)",main="ARMA(6,6) model",col='red')
lines(fittedvalues,lty=1,col="blue")
grid()
legend("topleft", legend=c("Fitted", "Observed"), col=c("blue","red"), lty=1:1, cex=0.8, box.lty=0)
hist(arma66_model$residuals,breaks=25, freq=FALSE, main='Residual Plot - ARMA(6,6)',col='blue')
qqnorm(arma66_model$residuals, main='Quantile-Quantile plot - ARMA(6,6)',col='blue')
acf(arma66_model$residuals, lag.max=1440, type='correlation', plot=TRUE, main='ACF residual plot-ARMA66')
arma66_forecasts=forecast(arma66_model,h=12)
autoplot(arma66_forecasts, main='Forecast-log scale-ARMA(6,6)', ylab='log energy', xlim=c(1400,1453))
